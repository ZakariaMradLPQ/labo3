$date
  Fri Nov  8 16:55:45 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module tb_signalprocessing $end
$var reg 8 ! a[7:0] $end
$var reg 8 " b[7:0] $end
$var reg 1 # activation $end
$var reg 1 $ op $end
$var reg 16 % s[15:0] $end
$scope module uut $end
$var reg 8 & a[7:0] $end
$var reg 8 ' b[7:0] $end
$var reg 1 ( activation $end
$var reg 1 ) op $end
$var reg 16 * s[15:0] $end
$var reg 8 + sum[7:0] $end
$var reg 16 , mul[15:0] $end
$var reg 16 - opout[15:0] $end
$var reg 16 . zero_vector[15:0] $end
$var reg 16 / sum_resized[15:0] $end
$var reg 16 0 mul_resized[15:0] $end
$scope module u1 $end
$var reg 16 1 a[15:0] $end
$var reg 16 2 b[15:0] $end
$var reg 1 3 sel $end
$var reg 16 4 y[15:0] $end
$upscope $end
$scope module u2 $end
$var reg 16 5 a[15:0] $end
$var reg 16 6 b[15:0] $end
$var reg 1 7 sel $end
$var reg 16 8 y[15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00001010 !
b00010100 "
0#
0$
b0000000000000000 %
b00001010 &
b00010100 '
0(
0)
b0000000000000000 *
b00011110 +
b0000000011001000 ,
b0000000000011110 -
b0000000000000000 .
b0000000000011110 /
b0000000011001000 0
b0000000000011110 1
b0000000011001000 2
03
b0000000000011110 4
b0000000000000000 5
b0000000000011110 6
07
b0000000000000000 8
#10000000
1$
1)
b0000000011001000 -
13
b0000000011001000 4
b0000000011001000 6
#20000000
1#
0$
b0000000000011110 %
1(
0)
b0000000000011110 *
b0000000000011110 -
03
b0000000000011110 4
b0000000000011110 6
17
b0000000000011110 8
#30000000
1$
b0000000011001000 %
1)
b0000000011001000 *
b0000000011001000 -
13
b0000000011001000 4
b0000000011001000 6
b0000000011001000 8
#40000000
